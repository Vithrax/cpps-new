// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums
enum Role {
  operator
  trainer
  client
  admin
  customer_service
}

enum ProposalStatus {
  pending
  accepted
  rejected
  cancelled
}

enum CaseStatus {
  pending
  answered
  finished
  cancelled
}

enum OptionCategory {
  reason
  size
  feature
  additional
}

enum DeviceSide {
  left
  right
}

enum Brand {
  oticon
  bernafon
  sonic
  multibrand
}

// Next-Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // end of next auth 

  initials         String?      @unique
  permission_level Role         @default(operator)
  company          Company?     @relation(fields: [companyId], references: [id])
  Proposal         Proposal[]
  companyId        Int?         @db.MediumInt
  Case             Case[]
  UserAccess       UserAccess[]

  @@index([companyId])
}

model UserAccess {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

// Tables
model Order {
  order_id          String     @id
  created_at        DateTime   @default(now())
  external_id       String?    @db.TinyText
  first_product_id  String     @db.TinyText
  second_product_id String?    @db.TinyText
  enduser_name      String?    @db.TinyText
  company           Company    @relation(fields: [companyId], references: [id])
  companyId         Int        @db.MediumInt
  Proposal          Proposal[]
  Case              Case[]

  @@index([companyId])
}

model Proposal {
  proposal_id       Int                 @id @default(autoincrement())
  created_at        DateTime            @default(now())
  created_by        User                @relation(fields: [userId], references: [id])
  userId            String
  version           Int                 @db.TinyInt
  status            ProposalStatus      @default(pending)
  order             Order               @relation(fields: [orderId], references: [order_id])
  OptionsOnProposal OptionsOnProposal[]
  orderId           String

  @@index([userId])
  @@index([orderId])
}

model ProposalOption {
  id                Int                 @id @default(autoincrement())
  description       String              @unique
  category          OptionCategory
  active            Boolean
  OptionsOnProposal OptionsOnProposal[]
}

model OptionsOnProposal {
  id               Int            @id @default(autoincrement())
  proposal         Proposal       @relation(fields: [proposalId], references: [proposal_id])
  option           ProposalOption @relation(fields: [proposalOptionId], references: [id])
  proposalOptionId Int
  device_side      DeviceSide
  proposalId       Int
  proposalVersion  Int            @default(1)

  @@index([proposalOptionId])
  @@index([proposalId])
}

model Case {
  case_id        Int        @id @default(autoincrement())
  created_at     DateTime   @default(now())
  created_by     User       @relation(fields: [userId], references: [id])
  userId         String
  order          Order      @relation(fields: [orderId], references: [order_id])
  comment        String     @db.Text
  reply          String?    @db.Text
  attachment_url String?    @db.Text
  attachment_key String?    @db.Text // for deleting attachments
  status         CaseStatus @default(pending)
  orderId        String

  @@index([userId])
  @@index([orderId])
}

model Company {
  id         Int          @id @unique
  name       String       @db.TinyText
  country    String       @db.TinyText
  brand      Brand
  Order      Order[]
  User       User[]
  UserAccess UserAccess[]
}
